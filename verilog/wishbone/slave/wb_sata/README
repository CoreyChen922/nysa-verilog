SATA Wishbone Slave Core

Core used to control a SATA hard drive

This core was tested with Nysa: http://nysa.readthedocs.org/en/latest/ and uses a python driver to test it out. This drive can be used as a reference for controlling the hard drive.

https://github.com/CospanDesign/nysa/blob/master/nysa/host/driver/sata_driver.py

The script that is used to test this can be found here:

https://github.com/CospanDesign/nysa/blob/master/test/hardware/test_dma_sata.py





Core Description


The following signals are used to interact with the core:

Sytem interface

input               clk,  //User clock, this does not need to be the same as the 75MHz SATA Clock
input               rst,  //System Reset

input               sata_75mhz_clk,
input               i_platform_ready,


Wishbone Bus Signals:

input               i_wbs_we,
input               i_wbs_cyc,
input       [3:0]   i_wbs_sel,
input       [31:0]  i_wbs_dat,
input               i_wbs_stb,
output  reg         o_wbs_ack,
output  reg [31:0]  o_wbs_dat,
input       [31:0]  i_wbs_adr,

output  reg         o_wbs_int,


Phy Layer Interface (Connect to the Gigabit Transciever)

output      [31:0]  o_tx_dout,
output              o_tx_is_k,
output              o_tx_comm_reset,
output              o_tx_comm_wake,
output              o_tx_elec_idle,
input               i_tx_oob_complete,

input       [31:0]  i_rx_din,
input       [3:0]   i_rx_is_k,
input               i_rx_elec_idle,
input               i_comm_init_detect,
input               i_comm_wake_detect,
input               i_rx_byte_is_aligned,

input               i_phy_error,



DMA Interface (wb_dma.v)

//Write Side
input               i_write_enable,
input       [63:0]  i_write_addr,
input               i_write_addr_inc,
input               i_write_addr_dec,
output              o_write_finished,
input       [23:0]  i_write_count,
input               i_write_flush,

output      [1:0]   o_write_ready,
input       [1:0]   i_write_activate,
output      [23:0]  o_write_size,
input               i_write_strobe,
input       [31:0]  i_write_data,

//Read Side
input               i_read_enable,
input       [63:0]  i_read_addr,
input               i_read_addr_inc,
input               i_read_addr_dec,
output              o_read_busy,
output              o_read_error,
input       [23:0]  i_read_count,
input               i_read_flush,

output              o_read_ready,
input               i_read_activate,
output      [23:0]  o_read_size,
output      [31:0]  o_read_data,
input               i_read_strobe




Register Overview:
CONTROL                   = 0x00
STATUS                    = 0x01

HARD_DRIVE_STATUS         = 0x02
HARD_DRIVE_SECTOR_COUNT   = 0x03
HARD_DRIVE_ADDRESS_HIGH   = 0x04
HARD_DRIVE_ADDRESS_LOW    = 0x05
DEBUG_STATUS              = 0x06
DEBUG_LINKUP_DATA         = 0x07
HARD_DRIVE_COMMAND        = 0x08
HARD_DRIVE_FEATURES       = 0x09
LOCAL_BUFFER_WRITE_SIZE   = 0x0A
DEBUG_HD_COUNTS           = 0x0B

LOCAL_SATA_BUFFER         = 0x100
LOCAL_SATA_BUFFER_SIZE    = 2048







Register Descriptions:

CONTROL:
Signals to control the core
BIT_HD_COMMAND_RESET            0
  Reset the command layer

BIT_EN_INT_HD_INTERRUPT         2
  Enable Interrupt when the hard drive sends an interrupt

BIT_EN_INT_DMA_ACTIVATE_STB     3
  Enable Interrupt when the hard drive sends a 'DMA Activate' request

BIT_EN_INT_D2H_REG_STB          4
  NOT CURRENTLY USED

BIT_EN_INT_PIO_SETUP_STB        5
  Enable Interrupt when Peripheral IO Setup is detected from hard drive

BIT_EN_INT_D2H_DATA_STB         6
  Enable Interrupts when the hard drive sends data to the host

BIT_EN_INT_DMA_SETUP_STB        7
  Enable interrupt when the hard drive sens the DMA Setup signal

BIT_EN_INT_SET_DEVICE_BITS_STB  9
  Enable interrutps when the hard drive sends the Set Device Bits signal

BIT_HD_RESET                    10
  Reset the sata core

BIT_EN_DMA_CONTROL              11
  Enable DMA Control

BIT_STB_WRITE_LOCAL_BUFFER      12
  Write Local buffer to the hard drive input fifos (as apposed to using the DMA)

BIT_STB_WRITE                   13
  Initiate a write to the hard drive

BIT_STB_READ                    14
  Initiate a read from the hard drive

BIT_STB_SYNC_ESCAPE             15
  Send a 'sync escape' sequence to the hard drive (cancels transactions)




STATUS:
BIT_PLATFORM_READY              0
  Low level platform is ready to use

BIT_PLATFORM_ERROR              1
  Error detected from the gigabit transcievers

BIT_LINKUP                      2
  Hard drive linkup

BIT_COMMAND_LAYER_READY         3
  Command layer is ready to accept new commands

BIT_SATA_BUSY                   4
  SATA core is busy

BIT_PHY_READY                   5
  Phy Layer is ready

BIT_LINK_LAYER_READY            6
  Link Layer is ready

BIT_TRANSPORT_LAYER_READY       7
  Transport Layer is ready

BIT_HARD_DRIVE_ERROR            8
  Detected an error from the hard drive response

BIT_PIO_DATA_READY              9
  Data is ready from the peripheral IO

BIT_RESET_ACTIVE                10
  Sata stack is in a state of reset

BIT_RX_COMM_INIT_DETECT         11
  Out of band signal COMM INIT detected

BIT_RX_COMM_WAKE_DETECT         12
  Out of band signal COMM WAKE detected

BIT_TX_COMM_RESET               13
  Sata stack is sending COMM_RESET out of band signal

BIT_TX_COMM_WAKE                14
  Sata stack is sending COMM_WAKE out of band signal

BIT_TX_OOB_COMPLETE             15
  SATA out of band transaction is completed

BIT_DIN_FIFO_READY0             16
BIT_DIN_FIFO_READY1             17
  FIFO for writing data to hard drive is ready to send data



HARD_DRIVE_STATUS:

The following are low level signals taken from the fram information structure (FIS)
received from the hard drive
BIT_D2H_INTERRUPT               0
BIT_D2H_NOTIFICATION            1

BIT_D2H_PMULT_LOW               4
BIT_D2H_PMULT_HIGH              7

BIT_D2H_FIS_LOW                 8
BIT_D2H_FIS_HIGH                15

BIT_D2H_STATUS_LOW              16
BIT_D2H_STATUS_HIGH             23
  Status Register

BIT_D2H_ERROR_LOW               24
BIT_D2H_ERROR_HIGH              31
  Error Register

Debug signals
BIT_OOB_STATE_HIGH              3
BIT_OOB_STATE_LOW               0
BIT_RESET_COUNT_HIGH            11
BIT_RESET_COUNT_LOW             4
BIT_D2H_INTERRUPT_EN            12 
BIT_DMA_ACTIVATE_EN             13
BIT_D2H_PIO_SETUP_EN            14
BIT_D2H_DATA_EN                 15
BIT_DMA_SETUP_EN                16
BIT_CMD_WR_ST_HIGH              31
BIT_CMD_WR_ST_LOW               28
BIT_TRSPRT_HIGH                 27
BIT_TRSPRT_LOW                  24
BIT_LLW_ST_HIGH                 23
BIT_LLW_ST_LOW                  20

DMA Debug signals
BIT_ACTIVATE_COUNT_HIGH         23
BIT_ACTIVATE_COUNT_LOW          16
BIT_ROK_COUNT_HIGH              15
BIT_ROK_COUNT_LOW               8
BIT_RERR_COUNT_HIGH             7
BIT_RERR_COUNT_LOW              0







